from Entero import *
import random
from Zp import * 
import numpy as np
import time

class Encryptor:

    def __init__(self, to_encrypt = "", to_decrypt = "", modCesaro = 65533, modVigenere = 65533, modVernam = 65533) -> None:
        self.__to_encrypt = to_encrypt
        self.__to_decrypt = to_decrypt
        self.__encryptedCesaro = ""
        self.__decryptedCesaro = ""
        self.__modCesaro = modCesaro
        
        self.__encryptedVigenere = ""
        self.__modVigenere = modVigenere
        self.__decryptedVigenere = ""

        self.__encryptedVernam = ""
        self.__modVernam = modVernam
        self.__decryptedVernam = ""
        self.__RSA_C = 81046691070563398510194694680787355187474358999282227052194484052647560210302098737070533826153769625471547344354697454024016941569511772161156947821290374325736808794174501909828007172763424415869976841700728907211049190349062370691133473122780280552602753346820801278537848119240052235318178103474539638768300502106946916124630312182739805131294676042518697339829726150038029996034194029129414387385997765756998438071513210335413875009903170545108243433261897886175293109691161999702040720053624089524246937559441555839938199208908659190925125637330543122655982789067594534432469468070608587444472689068284512584945754929425086955958348392289564661923318710219553628676802528465276081897168097496323040798410215452945360922191082618805100985662748362283508485266285416756029620741876890564678379020273811420336946066791381884591973269881518347126862255566737177474343822444710221044645159296022692478212094472510357461412072229668487655587262471863665384914482493853592978464375826419593629229468427304858426525727524251457721810215771549994470315528694279292916657077574968086143623009644026292061853724427996004816613460776180425073671525602855217877353780625641960537876622730995083148502329031522213715704098872258380083358301625993729071846155906721377441644802820816720517553379572329501356976953926105648514783807214665800740897697385274795751908981963504818862361556344681243972387483024963801049785127332332215647842513843056859936228125599045128903533892761863461688618845825846729195942478644835000350418648018243236301896508246948302016583572663112936804735528289094749917194076019830078708707243683400105548782384746080737678399852704471484364913824488324318496697304359381688527156902572773959625519339634588532046922735127351669436241477403152220256797938228718106882855475798834290853096702186561928550119871680742899466161516674413432612226198749536032282902498291204958978304249129176025786799891916061801247348214559067326488539085060311528983448253740770713289759272823224213695131228086648239656902354137331585290296040525555711452545946473736514968462066026348672902687860981421293837676671177961094488272050034783230437166292255164487652111236815270153356712876642899502220262718463229022685511219205809066859203624710310013452151210630406692726268556975562884651567716953413000126872799635505476520171452132718077938961259247505765473529794791510131860870625378637886034333843382191
        self.__RSA_N = 98688534912331151860345885324305025809428591230401698431419974051396876713534456976730227289388634895386575031376462193746176865969805448573879467942172147462549672447162315171947987995001552978234632810171169826402539965484796168758708992309867352787189264596745873614686213194297459280331275552074277110524009295952593775460227476941248445978431986424569812916424364339793877790629860533278984842631358218501693133738162494084743067284168725508611959459741776167223650427316220459280729516342121664840224885114969316223467309099146684132009955258125278690286931191861644255385519308500873942269767605291364013760423882964462447169405733391889405461529056411926647785573596071922517933086597961049299982110804121422503697555402525198120112107162282393646846617084496601100476491791235120319825755484752403446293411954844013411751948908201643296076316773780250973698705239509617609332751448497633977384776831998552786482667797110079941085116562286342939210013840704247669297743778594809319021345803014460843770527490850280641375442765077689332531402947050346236953426602683115880530862959510908595592695154950310879730508176705550343946566994059583361969439824669774442316050068095942116625298683836940599094087068560140270630092307544801316028535633044255352269949079288292406527541979119530343693566657876148719327148953325506710360435592014503971284701651104127041098779202972847147952342849913042962001918759333014182032932396584100335720420699232067595721762180200305601737777093229891204188892717766131540272714813944313130680409188076318636921669631236408542165557475775106395234931261393995099672126113198872698069023601238789790667670744367235615289150532522585061288466454763925384762391873522115688862898657473459867992445529761735942099053142734153970831294591822178850119726317685566988758820084538315929425739675189956719194383443181593993512367789636468369041746298974717360579391711526302845267167856238706280074419983774226805524014378139766063662839129711219284274625490964435801591990250414244611011852003673853512148075277256909073588946096320716677279784892535479621345254529455273576594039304856784640633602335879982026820284506654661876076733092940358797216422424559056824910555786005727306102549890331347481249761294888028808495021463598885251760625572012610368460022598102185544760297058647366570480659118098866951736737840232888174774067531725625897655978288434572422607150733354697
        self.__RSA_D = 7298738207148588575209138090388266256303263176410232503396018844529466018088121835124077470512071575314427377575519584363507993852626109791840912546822499464046617246300952695567793886100995100775989807565376394684477182384135487779310592400999403007497826156945967275398140032143696681336808389688515120324028336099357607026367225739494871621440873433370036747063364768682169930327389886549244578964470299757194087778139837520547502587062991483920933976595610699365991246710011363482288543021266206604594160120163006382209040029510141685462740859325529620112305171129400633173898537288812266718595816558422820566894507230002676678764914892826023608387946761468341026091823394114631018706428741970335776280464855708835295886655941278754851700262665394476683310984897626749167665946493266143171487897881380270448191734756216064871110656676249192388005794387069252773696982674791418213879144091446712352306318682436568551761483919959578655056085285038815240934490033451578755763727389617761989317325912450988781344322368964557400341612334078312927301079721360489268071447192904215464836880698194487212410070605560415920345760684816886144037771186872704975674187765618329454679608107595825807122406751064679721411309610894805753191025746751300673680270602493564272399415653762041287868207085868889106048903767819282146235480758310695648671634870371992389859222981567826709191073074573755472950812582078507082195784267260075004398278939458297626401082675925733205769593325306444001748114449519491238225312218717492502944126536152304005780229423458818072502889429664646338583173876870369772260448073231116187402175150701490489536030342404444600957790097369509999000444791506093698861643325601246411958970114835543844363659620246801572878798816618506723007943960432667983072797711842924213256857244825627546880734275137374432185006911033000161173745093859042038182039259971907942701526687376797669612663238542233945180520755996149179952392687925027419167557744029263846100123205767939924076259984845526789785013710642782048638743269944324358893160201491225624374536683161657425690267854265356713648272563145048088648421826981613879950400431586497623143696786554033784430556148672689312299497707529654358698311746398794579312239380368214370173851860076131569033713092048520181271662960595443623529086360042402300978768557872237911351854304795996856014225042737064696407923345756826578067255533596164969258149823711
        self.__RSA_Encrypted = ""
    def cesaro(self, a = 1, b = 1) -> str:
        if self.__encryptedCesaro !="":
            return self.__encryptedCesaro

        mod = self.__modCesaro
        a = Zp(a,mod)
        b = Zp(b,mod)

        for letter in self.__to_encrypt:
            self.__encryptedCesaro += str(a.mult(Zp(ord(letter),mod)).sum(b).getN())+ "  "
        return self.__encryptedCesaro

    def inv_cesaro(self, a=1, b=1) -> str:
        if self.__decryptedCesaro!="":
            return self.__decryptedCesaro
        mod = self.__modCesaro
        b = Zp(b,mod)
        a1 = Zp(a,mod).inv()
        
        self.__to_decrypt = self.__to_decrypt.split("  ")
        for letter in self.__to_decrypt:
            if letter.isnumeric():
                self.__decryptedCesaro+= chr(a1.mult(Zp(int(letter),mod).rest(b)).getN())
        return self.__decryptedCesaro
    
    def vigenere(self, a = [1], b = [1]) -> str:
        if self.__encryptedVigenere!="":
            return self.__encryptedVigenere
		# checar que los elemnetos de a no tengan divisores en comÃºn con modCesaro
        mod = self.__modVigenere

        for i in range(len(a)):
            a[i] = Zp(a[i],mod)
        for i in range(len(b)):
            b[i] = Zp(b[i],mod)
        
        modA = len(a)
        modB = len(b)
        iA = 0
        iB = 0
        
        for letter in self.__to_encrypt:
            self.__encryptedVigenere += str(a[iA].mult(Zp(ord(letter),mod)).sum(b[iB]).getN())+ "  "
            iA = (iA + 1)%modA
            iB = (iB + 1)%modB
			
        return self.__encryptedVigenere

    def inv_Vigenere(self, a=[1], b=[1]) -> str:
        if self.__decryptedVigenere!="":
            return self.__decryptedVigenere
        mod = self.__modVigenere
        self.__to_decrypt = self.__to_decrypt.split("  ")

        for i in range(len(a)):
            a[i] = Zp(a[i],mod)
        for i in range(len(b)):
            b[i] = Zp(b[i],mod)
        s = list(map(lambda x: x.inv(), a))

        modA = len(a)
        modB = len(b)
        iA = 0
        iB = 0
       
        for letter in self.__to_decrypt:

            if letter.isnumeric():
                self.__decryptedVigenere+= chr(s[iA].mult(Zp(int(letter),mod).rest(b[iB])).getN())

            iA = (iA + 1)%modA
            iB = (iB + 1)%modB
        return self.__decryptedVigenere
    
    def Vernam(self) -> tuple:
        if self.__encryptedVernam !="":
            return self.__encryptedVernam

        mod = self.__modVernam
        
        aaux = 0
        baux = 0
        a = list()
        b = list()
        
        po = Entero(mod).phi()-1
        
        isPrime = False
        if po == mod -2:
            isPrime = True
        i=0

        for letter in self.__to_encrypt:
            #t1 = time.time() 
            print(letter)
            b.append(random.choice(range(mod)))
            aaux = random.choice(range(mod))
                
            #print(aaux, i)
            
            if not isPrime:
                aux = Zp(aaux,mod)
                while aux.inv(po).mult(aux).getN() != 1:
                    aaux = random.choice(range(9510898769))
                    aux = Zp(aaux,mod)
            
            a.append(aaux)
                 
            self.__encryptedVernam +=str(Zp(a[i],mod).mult(Zp(ord(letter), mod)).sum(Zp(b[i],mod)).getN())+ "  "
            #t2 = time.time()
            #print(t2-t1)
            i+=1
        return self.__encryptedVernam, a, b

    def inv_Vernam(self, a, b) -> tuple:
        if self.__decryptedVernam!="":
            return self.__decryptedVernam
        mod = self.__modVernam


        self.__to_decrypt = self.__to_decrypt.split("  ")

        i = 0
        phi = Entero(mod).phi() - 1
        
        for letter in self.__to_decrypt:
            if letter.isnumeric():
                #print("Va bien")
                s = Zp(a[i],mod).inv(phi)  
                #print("2") 
                self.__decryptedVernam+= chr(s.mult(Zp(int(letter),mod).rest(Zp(b[i],mod))).getN())
                i+=1
        return self.__decryptedVernam

    def RSA(self) -> str:
        toEncrypt = Encryptor(to_encrypt= self.__to_encrypt, modCesaro=self.__RSA_N).cesaro(1,self.__RSA_C)
        toEncrypt = toEncrypt.split("  ")
        max = max(toEncrypt)
        C = Entero.toBinary(self.__RSA_C)
        for letter in toEncrypt:
            self.__RSA_Encrypted += str(Zp(int(letter), self.__RSA_N).pow(self.__RSA_C, po=C).getN()) + "  "
        return self.__RSA_Encrypted